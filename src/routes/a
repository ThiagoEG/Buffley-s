/*import React, { useState, useEffect } from 'react';
import { ScrollView, StatusBar, StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';
import Dropdown from '../Componentes/DropDown';
import DropCard from '../Componentes/DropCard'; // Importe o DropCard
import Navbar from '../Componentes/Navbar';
import Entradas from '../ReceitasBanco/Entradas';
import Acompanhamentos from '../ReceitasBanco/Acompanhamentos';
import Saladas from '../ReceitasBanco/Saladas';
import Bebidas from '../ReceitasBanco/Bebidas';
import Sobremesas from '../ReceitasBanco/Sobremesas';
import Guarnicoes from '../ReceitasBanco/Guarnicoes';
import PratosPrincipais from '../ReceitasBanco/PratosPrincipais';
import LinearButton from '../Componentes/LinearButton';
import { Picker } from '@react-native-picker/picker';
import CardInfo from '../Componentes/CardBuffetInfo';
import { useNavigation } from '@react-navigation/native';

const calcularCustoTotal = (receita) => {
  let custoTotal = 0;
  receita.ingredientes.forEach((ingrediente) => {
    custoTotal += ingrediente.valor;
  });
  return custoTotal;
};

const calcularCategoriaMaisBarata = (selectedRecipes) => {
  let categorias = {};
  selectedRecipes.forEach((recipe) => {
    const categoria = recipe.categoria;
    const custo = calcularCustoTotal(recipe);
    if (!categorias[categoria]) {
      categorias[categoria] = custo;
    } else {
      categorias[categoria] += custo;
    }
  }); // <--- Adicione um parêntese aqui
  let categoriaMaisBarata = null;
  let custoMaisBarato = Number.MAX_VALUE;
  for (const categoria in categorias) {
    if (categorias[categoria] < custoMaisBarato) {
      custoMaisBarato = categorias[categoria];
      categoriaMaisBarata = categoria;
    }
  }
  return { categoria: categoriaMaisBarata, custo: custoMaisBarato };
};

const calcularCategoriaMaisCara = (selectedRecipes) => {
  let categorias = {};
  selectedRecipes.forEach((recipe) => {
    const categoria = recipe.categoria;
    const custo = calcularCustoTotal(recipe);
    if (!categorias[categoria]) {
      categorias[categoria] = custo;
    } else {
      categorias[categoria] += custo;
    }
  }); // <--- Adicione um parêntese aqui
  let categoriaMaisCara = null;
  let custoMaisCaro = 0;
  for (const categoria in categorias) {
    if (categorias[categoria] > custoMaisCaro) {
      custoMaisCaro = categorias[categoria];
      categoriaMaisCara = categoria;
    }
  }
  return { categoria: categoriaMaisCara, custo: custoMaisCaro };
};

export default function CriarCardapio() {
  // ... (código existente acima)

  const navigation = useNavigation(); // Obtenha a instância de navegação
  const [selectedRecipes, setSelectedRecipes] = useState([]);
  const [totalCost, setTotalCost] = useState(0);
  const [numeroConvidados, setNumeroConvidados] = useState(0);
  const [nomeCardapio, setNomeCardapio] = useState('');
  const [custoMaisBarato, setCustoMaisBarato] = useState(0);
  const [custoMaisCaro, setCustoMaisCaro] = useState(0);

  const criarCardapio = () => {
    navigation.navigate('DetalhesCardapio', {
      nomeCardapio: nomeCardapio,
      custoMaisBarato: custoMaisBarato,
      custoMaisCaro: custoMaisCaro,
      quantidadeItens: selectedRecipes.length,
      totalCost: totalCost,
      numeroConvidados: numeroConvidados,
      categoriaMaisBarata: selectedRecipes.length > 0 ? calcularCategoriaMaisBarata(selectedRecipes).categoria : '',
      categoriaMaisCara: selectedRecipes.length > 0 ? calcularCategoriaMaisCara(selectedRecipes).categoria : '',
    });
  };
  


  const handleSelectRecipe = (recipe) => {
    setSelectedRecipes([...selectedRecipes, recipe]);
    const custoReceita = calcularCustoTotal(recipe);
    setTotalCost(totalCost + custoReceita);
  };

  useEffect(() => {
    const maisBarato = calcularCategoriaMaisBarata(selectedRecipes);
    const maisCaro = calcularCategoriaMaisCara(selectedRecipes);
    setCustoMaisBarato(maisBarato.custo);
    setCustoMaisCaro(maisCaro.custo);
  }, [totalCost, nomeCardapio, selectedRecipes]);

  return (
    <View style={styles.container}>
      <StatusBar hidden={true} />
      <ScrollView>
        <Navbar />

        <View style={styles.containerCardapio}>
          <View style={styles.totalCostContainer}>
            <Text style={{ fontSize: 20, fontWeight: '400', color: '#318051' }}>Custo Total: R$ {totalCost.toFixed(2)}</Text>
          </View>
          <View style={styles.inputName}>
            <Text style={{ fontSize: 24, fontWeight: 'bold', marginHorizontal: 16 }}>Nome</Text>
            <TextInput
              placeholder="Digite o nome do Cardápio"
              style={styles.Input}
              value={nomeCardapio}
              onChangeText={(text) => setNomeCardapio(text)}
            />
          </View>
          <View style={styles.inputs}>
            <View style={styles.inputData}>
              <Text style={{ fontSize: 24, fontWeight: 'bold' }}>Convidados</Text>
              <Picker
                style={{
                  borderRadius: 5,
                  height: 40,
                  width: 150,
                  elevation: 5,
                  backgroundColor: 'white',
                }}
                selectedValue={numeroConvidados}
                onValueChange={(itemValue) => setNumeroConvidados(itemValue)}
              >
                <Picker.Item label="Selecione o número de convidados" value={0} />
                <Picker.Item label="50" value={200} />
                <Picker.Item label="100" value={200} />
                <Picker.Item label="150" value={150} />
                <Picker.Item label="200" value={200} />
              </Picker>
            </View>
            <View style={styles.inputDrop}>
              <Text style={{ fontSize: 24, fontWeight: 'bold' }}>Data</Text>
              <Dropdown />
            </View>
          </View>
          {/* Adicione os DropCard para diferentes categorias de receitas aqui *//*}
       /*   <DropCard
            title="Entradas"
            recipes={Entradas}
            selectedRecipes={selectedRecipes}
            onSelectRecipe={handleSelectRecipe}
          />
          <DropCard
            title="Pratos principais"
            recipes={PratosPrincipais}
            selectedRecipes={selectedRecipes}
            onSelectRecipe={handleSelectRecipe}
          />

          {/* Adicione DropCard para outras categorias de receitas aqui conforme necessário *//*}
         /* <TouchableOpacity style={styles.buttonContainer} onPress={criarCardapio}>
            <LinearButton text="Criar" />
          </TouchableOpacity>
      /*  </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignSelf: 'center',
    width: '100%',
    backgroundColor: 'white',
  },
  Input: {
    width: 350,
    height: 50,
    elevation: 8,
    backgroundColor: 'white',
    paddingHorizontal: 16,
    marginTop: 8,
    borderRadius: 5,
    marginHorizontal: 16,
  },
  inputs: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: 350,
    marginTop: 10,
    marginBottom: 24,
    paddingHorizontal: 16,
  },
  inputData: {
    flex: 1,
    marginRight: 26,
  },
  inputDrop: {
    flex: 1,
    marginLeft: 40,
  },
  totalCostContainer: {
    marginBottom: 16,
    marginLeft: 16,
  },
  containerCardapio: {
    flex: 1,
    alignSelf: 'center',
  },
  buttonContainer: {
    marginTop: 12,
    width: '100%',
    height: 40,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 5,
  },
});
*/